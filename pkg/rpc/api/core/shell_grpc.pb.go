// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: shell.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Shell_Shell_FullMethodName = "/Shell/Shell"
)

// ShellClient is the client API for Shell service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShellClient interface {
	Shell(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ShellMsg, ShellMsg], error)
}

type shellClient struct {
	cc grpc.ClientConnInterface
}

func NewShellClient(cc grpc.ClientConnInterface) ShellClient {
	return &shellClient{cc}
}

func (c *shellClient) Shell(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ShellMsg, ShellMsg], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Shell_ServiceDesc.Streams[0], Shell_Shell_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ShellMsg, ShellMsg]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Shell_ShellClient = grpc.BidiStreamingClient[ShellMsg, ShellMsg]

// ShellServer is the server API for Shell service.
// All implementations must embed UnimplementedShellServer
// for forward compatibility.
type ShellServer interface {
	Shell(grpc.BidiStreamingServer[ShellMsg, ShellMsg]) error
	mustEmbedUnimplementedShellServer()
}

// UnimplementedShellServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShellServer struct{}

func (UnimplementedShellServer) Shell(grpc.BidiStreamingServer[ShellMsg, ShellMsg]) error {
	return status.Errorf(codes.Unimplemented, "method Shell not implemented")
}
func (UnimplementedShellServer) mustEmbedUnimplementedShellServer() {}
func (UnimplementedShellServer) testEmbeddedByValue()               {}

// UnsafeShellServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShellServer will
// result in compilation errors.
type UnsafeShellServer interface {
	mustEmbedUnimplementedShellServer()
}

func RegisterShellServer(s grpc.ServiceRegistrar, srv ShellServer) {
	// If the following call pancis, it indicates UnimplementedShellServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Shell_ServiceDesc, srv)
}

func _Shell_Shell_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShellServer).Shell(&grpc.GenericServerStream[ShellMsg, ShellMsg]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Shell_ShellServer = grpc.BidiStreamingServer[ShellMsg, ShellMsg]

// Shell_ServiceDesc is the grpc.ServiceDesc for Shell service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shell_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Shell",
	HandlerType: (*ShellServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Shell",
			Handler:       _Shell_Shell_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "shell.proto",
}
